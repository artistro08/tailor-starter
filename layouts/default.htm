description = "Default Layout for Page Tailor Entries & CMS Pages"
title = "Default"

[resources]
js[] = "bootstrap.bundle.js"
css[] = "bootstrap.css"

[global settings]
handle = "Content\Settings"
==
<?php
use Stripe\Stripe as Stripe;
use Stripe\Checkout as Checkout;
use Tailor\Models\GlobalRecord as GlobalRecord;
use Tailor\Models\EntryRecord as EntryRecord;

function onRemoveFromCart() {
    $cart_session = Session::get('cart_items');
    unset($cart_session[input('index')]);
    $cart_session = array_values($cart_session);
    Session::put('cart_items', $cart_session, 4320);

    $this['cart_items'] = Session::get('cart_items');
}

function onCheckout() {
    // Grab Shop settings from Content -> Shop -> Settings
    $shop_settings = GlobalRecord::findForGlobal('Content\Settings');
    $success_url = 
        Config::get('app.url') .
        '/' . 
        $shop_settings->stripe_checkout_success_page->slug;
    $cancel_url = $this->currentPageUrl();

    // Set Stripe Key from Settings
    Stripe::setApiKey($shop_settings->stripe_secret_key);

    // Get Cart Data from Session
    $cart_data = Session::get('cart_items');

    // Set Line Items
    $line_items = [];

    foreach($cart_data as $line_item) {
        $all_metadata = [];
        foreach($line_item['metadata'] as $pair) {
            list($a, $b) = explode(':', $pair);
            $all_metadata[$a] = $b;
        }

        $product_line_item = EntryRecord::inSection('Content\Product')->find($line_item['product_id']);

        if($product_line_item->content_group == "simple") {
            $items_in_question = [];
            if($line_item['quantity'] > $product_line_item->quantity) {
                $items_in_question[] = ['name' => $line_item['product_name']];
                $this['items_in_question'] = $items_in_question;
                throw new AjaxException(['#items-out-of-stock' => $this->renderPartial('shop/items-out-of-stock-message')]);
            }
        }

        $all_metadata['tailor_id'] = $line_item['product_id'];
        $line_items[] = [
            'price_data' => [
                'currency'     => 'USD',
                'product_data' => [
                    'name'        => $line_item['product_name'],
                    'description' => $line_item['product_description'] . ' - ' . implode(' - ', $line_item['metadata']),
                    'images'      => [
                        $line_item['image'],
                    ],
                    'metadata'    => $all_metadata,
                ],
                'unit_amount' => $line_item['unit_amount'],
            ],
            'quantity' => $line_item['quantity'],
        ];
    }


    // Set Shipping Stuff
    $available_countries = $shop_settings->available_countries;
    $shipping_rate_data = [];

    foreach ($shop_settings->shipping_methods as $shipping_method) {
        $shipping_rate_data[] = [
            'shipping_rate_data' => [
                'type' => 'fixed_amount',
                'fixed_amount' => [
                    'amount' => $shipping_method->price * 100,
                    'currency' => 'usd',
                ],
                'display_name' => $shipping_method->title,
                'delivery_estimate' => [
                    'minimum' => [
                        'unit' => 'business_day',
                        'value' => $shipping_method->delivery_estimate_min,
                    ],
                    'maximum' => [
                        'unit' => 'business_day',
                        'value' => $shipping_method->delivery_estimate_max,
                    ],
                ]
            ]
        ];
    }

    // Initiate Checkout Session
    $checkout_session = Checkout\Session::create([
        'shipping_address_collection' => [
            'allowed_countries' => $available_countries,
        ],
        'shipping_options' => $shipping_rate_data,
        'line_items' => $line_items,
        'mode' => 'payment',
        'success_url' =>  $success_url.'?session_id={CHECKOUT_SESSION_ID}',
        'cancel_url'  => $cancel_url,
    ]);

    return redirect($checkout_session->url);
}

function onLoad() {
    $this['cart_items'] = Session::get('cart_items');
}

function onStart() {
    if($this['section']) {
        $meta_title       = $this['section']->meta_title;
        $meta_description = $this['section']->meta_description;
        $sharing_image    = $this['section']->sharing_image;

        if($meta_title != null) {
            $meta_title = $this['global']->homepage->meta_title;
        }

        if($meta_description != null) {
            $meta_description = $this['global']->homepage->meta_description;
        }

        if($sharing_image != null) {
            $sharing_image    = $this['global']->homepage->meta_description;
        }
    }

    $this['cart_items'] = Session::get('cart_items');
}

function onFormSubmit() {

    $form_input = input();
    $form_id = $form_input["form_id"];
    $form_success_message = $form_input["success_message"];
    $form = EntryRecord::inSection('Content\Forms')->find($form_id);
    $submission = EntryRecord::inSection('Content\Forms\Submissions');
    $form_validation_rules = [];
    $form_input_formatted = '';
    $form_name = '(no data)';
    
    // Get Form Validation and Validate
    foreach ($form->fields as $field) {
        
        $field_validation_rules = [];

        if($field->validation == true) {

            foreach ($field->validation_rules as $validation_rule) {
                $field_validation_rules[] = $validation_rule->attributes['type'];
            }
            $field_validation_rules = implode("|", $field_validation_rules);
            $form_validation_rules[] = [$field->slug => $field_validation_rules];
        }

    }

    $form_validation_rules = array_merge(...$form_validation_rules);
    $validator = request()->validate($form_validation_rules);
    
    foreach ($form_input as $key => $value) {
        
        if(($key != "g-recaptcha-response") && ($key != "form_id") && ($key != "success_message")) {
            if($key == array_key_first($form_input)){
                $form_name = (!empty($value)) ? $value : $form_name;
            }
            $key = ucwords(str_replace("-", ' ', $key));
            $form_input_formatted .= $key . ": " . $value  . "\n";
        }

    }

    $submission->title = $form_name;
    $submission->form  = $form_input['form_id'];
    $submission->data  = $form_input_formatted;
    
    $submission->save();

    Flash::success($form_success_message);

}
?>
==
<!DOCTYPE html>
<html lang="en">
    <head>
        {% partial 'head' %}
    </head>
    {% partial 'header' %}
    <body>
        {{ settings.body_code|raw }}
        <main>
            {% page %}
        </main>
    </body>
    <div id="cart-data">
        {% partial 'shop/cart-data' %}
    </div>
    {% partial 'footer' %}
    {% partial 'foot' %}
</html>