description = "Page Layout for Product Entries"
title = "Page"

[global settings]
handle = "Content\Settings"
==
<?php
use Stripe\Stripe as Stripe;
use Stripe\Checkout as Checkout;
use Tailor\Models\GlobalRecord as GlobalRecord;
use Tailor\Models\EntryRecord as EntryRecord;

// function to check if string is json format.
function isJson($json) {
    $obj = json_decode($json);
    
    // Not valid JSON
    if ($obj === null) {
        return false;    
    }

    $json = ltrim($json);

    // Object
    if (strpos($json, '{') === 0) {
        return true;
    }

    // Array
    if (strpos($json, '[') === 0) {
        return true;
    }

    return false;

}

// Buy button submit
function onBuySubmit() {
    
    // Grab Shop settings from Content -> Shop -> Settings
    $shop_settings = GlobalRecord::findForGlobal('Content\Settings');
    $currency      = $shop_settings->currency;
    $success_url = 
        Config::get('app.url') .
        '/' . 
        $shop_settings->stripe_checkout_success_page->slug;
    $cancel_url = $this->currentPageUrl();

    // Set Stripe Key from Settings
    Stripe::setApiKey($shop_settings->stripe_secret_key);

    // Get Input data from October CMS AJAX Request
    $product_details = input();

    // Set non-dynamic variables (name, price, etc)
    $product_name = input('name');
    $product_id = input('id');
    $product_price_unformatted = input('price');
    $product_price = input('price');
    $product_description = input('description');
    $product_image = input('image');

    // Declare arrays for dynamic variables
    $pricing = [];
    $pre_product_data = [];
    $metadata = [];
    $option_pricing = [];

    // Add dynamic content to their respective arrays. (pricing, metadata)
    foreach ($product_details as $product_value) {
        if ($product_image != $product_value) {
            if (is_numeric($product_value)) {
                if(input('quantity') != $product_value) {
                    if(input('id') != $product_value) {
                        $pricing[] = $product_value;
                    }
                }
            }
            if ($this->isJson($product_value)) {
                $pre_product_data[] = json_decode($product_value, true);
            }
            if (!is_numeric($product_value)) {
                if (!$this->isJson($product_value)) {
                    if($product_value != $product_description) {
                        if($product_value != $product_name){
                            if($product_id != $product_value) {
                                $metadata[] = $product_value;
                            }
                        }
                    }
                }
            }
        }
        
    };

    foreach ($pre_product_data as $product_data) {
        foreach($product_data as $item) {
            if (is_numeric($item)) {
                $option_pricing[] = $item;
            }
        }
    }

    foreach ($pre_product_data as $product_data) {
        foreach($product_data as $item) {
            if (!is_numeric($item)) {
                $metadata[] = $item;
            }
        }
    }

    $all_metadata = [];


    foreach($metadata as $pair) {
        if(str_contains($pair, ':')){
            list($a, $b) = explode(':', $pair);
            $all_metadata[$a] = $b;
        }
    }
    
    
    $all_metadata['tailor_id'] = $product_id;


    // Prepare pricing for stripe checkout
    $option_pricing = array_sum($option_pricing);
    $pricing_sum = array_sum($pricing) + $option_pricing;
    $total = $pricing_sum * 100;
    $quantity = input('quantity');


    // Prepare shipping methods for checkout

    $available_countries = $shop_settings->available_countries;
    $shipping_rate_data = [];

    foreach ($shop_settings->shipping_methods as $shipping_method) {
        $shipping_rate_data[] = [
            'shipping_rate_data' => [
                'type' => 'fixed_amount',
                'fixed_amount' => [
                    'amount' => $shipping_method->price * 100,
                    'currency' => strtolower($currency),
                ],
                'display_name' => $shipping_method->title,
                'delivery_estimate' => [
                    'minimum' => [
                        'unit' => 'business_day',
                        'value' => $shipping_method->delivery_estimate_min,
                    ],
                    'maximum' => [
                        'unit' => 'business_day',
                        'value' => $shipping_method->delivery_estimate_max,
                    ],
                ]
            ]
        ];
    }

    // Initiate Checkout Session
    $checkout_session = Checkout\Session::create([
        'shipping_address_collection' => [
            'allowed_countries' => $available_countries,
        ],
        'shipping_options' => $shipping_rate_data,
        'line_items' => [[
            'price_data' => [
                'currency'     => $currency,
                'product_data' => [
                    'name'        => $product_name,
                    'description' => $product_description . ' - ' . implode(' - ', $metadata),
                    'images'      => [
                        $product_image,
                    ],
                    'metadata'    => $all_metadata,
                ],
                'unit_amount' => $total,
            ],
            'quantity' => $quantity,
        ]],
        'mode' => 'payment',
        'success_url' =>  $success_url,
        'cancel_url'  => $cancel_url,
    ]);
    return redirect($checkout_session->url);
}

// Cart button submit
function onAddToCart() {
    
    // Grab Shop settings from Content -> Shop -> Settings
    $shop_settings = GlobalRecord::findForGlobal('Content\Settings');
    $success_url = 
        Config::get('app.url') .
        '/' . 
        $shop_settings->stripe_checkout_success_page->slug;
    $cancel_url = $this->currentPageUrl();

    // Set Stripe Key from Settings
    Stripe::setApiKey($shop_settings->stripe_secret_key);

    // Get Input data from October CMS AJAX Request
    $product_details = input();

    // Set non-dynamic variables (name, price, etc)
    $product_name = input('name');
    $product_id = input('id');
    $product_price_unformatted = input('price');
    $product_price = input('price');
    $product_description = input('description');
    $product_image = input('image');

    // Declare arrays for dynamic variables
    $pricing = [];
    $pre_product_data = [];
    $metadata = [];
    $option_pricing = [];

    // Add dynamic content to their respective arrays. (pricing, metadata)
    foreach ($product_details as $product_value) {
        if ($product_image != $product_value) {
            if (is_numeric($product_value)) {
                if(input('quantity') != $product_value) {
                    if(input('id') != $product_value) {
                        $pricing[] = $product_value;
                    }
                }
            }
            if ($this->isJson($product_value)) {
                $pre_product_data[] = json_decode($product_value, true);
            }
            if (!is_numeric($product_value)) {
                if (!$this->isJson($product_value)) {
                    if($product_value != $product_description) {
                        if($product_value != $product_name){
                            if($product_id != $product_value) {
                                $metadata[] = $product_value;
                            }
                        }
                    }
                }
            }
        }
    };

    foreach ($pre_product_data as $product_data) {
        foreach($product_data as $item) {
            if (is_numeric($item)) {
                $option_pricing[] = $item;
            }
        }
    }

    foreach ($pre_product_data as $product_data) {
        foreach($product_data as $item) {
            if (!is_numeric($item)) {
                $metadata[] = $item;
            }
        }
    }

    $all_metadata = [];

    foreach($metadata as $pair) {
        if(str_contains($pair, ':')){
            list($a, $b) = explode(':', $pair);
            $all_metadata[$a] = $b;
        }
    }
    
    
    $all_metadata['tailor_id'] = $product_id;

    // Prepare pricing for stripe checkout
    $option_pricing = array_sum($option_pricing);
    $pricing_sum = array_sum($pricing) + $option_pricing;
    $total = $pricing_sum * 100;
    $quantity = input('quantity');

    $cart_data = [
        'product_id'          => $product_id,
        'product_name'        => $product_name,
        'product_description' => $product_description,
        'metadata'            => $metadata,
        'image'               => $product_image,
        'unit_amount'         => $total,
        'quantity'            => $quantity
    ];

    $cart_stuff = [];

    if (Session::has('cart_items')) {
        $cart_session = Session::get('cart_items');
        $cart_quantity = 0;
        $should_add_to_cart = true;
        foreach($cart_session as $cart_item) {
            if($cart_item['product_id'] == $cart_data['product_id']) {
                Log::info($cart_item['product_id'].' - '. $cart_data['product_id']);
                $cart_quantity = $cart_data['quantity']+$cart_quantity;
                $product = EntryRecord::inSection('Content\Product')->find($cart_data['product_id']);
                $product_quantity = $product->quantity;
                $product_type = $product->content_group;

                if($product_type == 'simple') {
                    if($cart_quantity >= $product_quantity) {
                        $should_add_to_cart = false;
                    }
                }
            }
        }

        if($should_add_to_cart == true) {
            $cart_session[] = $cart_data;
            Session::put('cart_items', $cart_session, 4320);
        } else {
            throw new AjaxException(['#quantity-error-message' => $this->renderPartial('shop/quantity-error-message')]);
        }
        
    } else {
        Session::put('cart_items', [$cart_data], 4320);
    }

    $cart_items = Session::get('cart_items');
    $this['cart_items'] = Session::get('cart_items');
}

function onRemoveFromCart() {
    $cart_session = Session::get('cart_items');
    unset($cart_session[input('index')]);
    $cart_session = array_values($cart_session);
    Session::put('cart_items', $cart_session, 4320);

    $this['cart_items'] = Session::get('cart_items');
}

function onLoad() {

    // Get Input data from October CMS AJAX Request
    $product_details = input();

    // Set non-dynamic variables (name, price, etc)
    $product_name = input('name');
    $product_id = input('id');
    $product_price_unformatted = input('price');
    $product_price = input('price');
    $product_description = input('description');
    $product_image = input('image');

    // Declare arrays for dynamic variables
    $pricing = [];
    $pre_product_data = [];
    $metadata = [];
    $option_pricing = [];

    // Add dynamic content to their respective arrays. (pricing, metadata)
    foreach ($product_details as $product_value) {
        if ($product_image != $product_value) {
            if (is_numeric($product_value)) {
                if(input('quantity') != $product_value) {
                    if(input('id') != $product_value) {
                        $pricing[] = $product_value;
                    }
                }
            }
            if(!empty($product_value)) {
                if ($this->isJson($product_value)) {
                    $pre_product_data[] = json_decode($product_value, true);
                }
            }
            
            if (!is_numeric($product_value)) {
                if (!$this->isJson($product_value)) {
                    if($product_value != $product_description) {
                        if($product_value != $product_name){
                            $metadata[] = $product_value;
                        }
                    }
                }
            }
        }
        
    };

    foreach ($pre_product_data as $product_data) {
        foreach($product_data as $item) {
            if(!empty($item)) {
                if(input('quantity') != $item) {
                    if (is_numeric($item)) {
                        $option_pricing[] = $item;
                    }
                }
            }
            
        }
    }

    foreach ($pre_product_data as $product_data) {
        foreach($product_data as $item) {
            if (!is_numeric($item)) {
                $metadata[] = $item;
            }
        }
    }

    $option_pricing = array_sum($option_pricing);
    $product_total = array_sum($pricing) + $option_pricing;
    
    $this['product_details']           = $product_details;
    $this['product_name']              = $product_name;
    $this['product_price_unformatted'] = $product_price_unformatted;
    $this['product_price']             = $product_price;
    $this['product_description']       = $product_description;
    $this['product_image']             = $product_image;
    $this['pricing']                   = $pricing;
    $this['pre_product_data']          = $pre_product_data;
    $this['metadata']                  = $metadata;
    $this['option_pricing']            = $option_pricing;
    $this['product_total']             = $product_total;
    
    $this['cart_items'] = Session::get('cart_items');
}

function onStart() {
    $this['cart_items'] = Session::get('cart_items');
}

function onCheckout() {
    // Grab Shop settings from Content -> Shop -> Settings
    $shop_settings = GlobalRecord::findForGlobal('Content\Settings');
    $currency      = $shop_settings->currency;
    $success_url = 
        Config::get('app.url') .
        '/' . 
        $shop_settings->stripe_checkout_success_page->slug;
    $cancel_url = $this->currentPageUrl();

    // Set Stripe Key from Settings
    Stripe::setApiKey($shop_settings->stripe_secret_key);

    // Get Cart Data from Session
    $cart_data = Session::get('cart_items');

    // Set Line Items
    $line_items = [];

    foreach($cart_data as $line_item) {
        $all_metadata = [];
        foreach($line_item['metadata'] as $pair) {
            list($a, $b) = explode(':', $pair);
            $all_metadata[$a] = $b;
        }

        $product_line_item = EntryRecord::inSection('Content\Product')->find($line_item['product_id']);

        if($product_line_item->content_group == "simple") {
            $items_in_question = [];
            if($line_item['quantity'] > $product_line_item->quantity) {
                $items_in_question[] = ['name' => $line_item['product_name']];
                $this['items_in_question'] = $items_in_question;
                throw new AjaxException(['#items-out-of-stock' => $this->renderPartial('shop/items-out-of-stock-message')]);
            }
        }

        $all_metadata['tailor_id'] = $line_item['product_id'];
        $line_items[] = [
            'price_data' => [
                'currency'     => $currency,
                'product_data' => [
                    'name'        => $line_item['product_name'],
                    'description' => $line_item['product_description'] . ' - ' . implode(' - ', $line_item['metadata']),
                    'images'      => [
                        $line_item['image'],
                    ],
                    'metadata'    => $all_metadata,
                ],
                'unit_amount' => $line_item['unit_amount'],
            ],
            'quantity' => $line_item['quantity'],
        ];
    }

    // Set Shipping Stuff
    $available_countries = $shop_settings->available_countries;
    $shipping_rate_data = [];

    foreach ($shop_settings->shipping_methods as $shipping_method) {
        $shipping_rate_data[] = [
            'shipping_rate_data' => [
                'type' => 'fixed_amount',
                'fixed_amount' => [
                    'amount' => $shipping_method->price * 100,
                    'currency' => strtolower($currency),
                ],
                'display_name' => $shipping_method->title,
                'delivery_estimate' => [
                    'minimum' => [
                        'unit' => 'business_day',
                        'value' => $shipping_method->delivery_estimate_min,
                    ],
                    'maximum' => [
                        'unit' => 'business_day',
                        'value' => $shipping_method->delivery_estimate_max,
                    ],
                ]
            ]
        ];
    }

    // Initiate Checkout Session
    $checkout_session = Checkout\Session::create([
        'shipping_address_collection' => [
            'allowed_countries' => $available_countries,
        ],
        'shipping_options' => $shipping_rate_data,
        'line_items' => $line_items,
        'mode' => 'payment',
        'success_url' =>  $success_url.'?session_id={CHECKOUT_SESSION_ID}',
        'cancel_url'  => $cancel_url,
    ]);

    return redirect($checkout_session->url);
}
?>
==
<html lang="en">
    <head>
        {% partial 'head' %}
    </head>
    {% partial 'header' %}
    <body>
        {{ settings.body_code|raw }}
        {% placeholder body_code %}
        <main>
            {% page %}
        </main>
    </body>
    
    {% if settings.enable_shop %}
        <div id="cart-data">
            {% partial 'shop/cart-data' %}
        </div>
    {% endif %}
    {% partial 'footer' %}
    {% partial 'foot' %}
</html>